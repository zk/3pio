package report

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/zk/3pio/internal/ipc"
	"github.com/zk/3pio/internal/runner"
)

// mockLogger for testing
type mockLogger struct {
	debugMessages []string
	errorMessages []string
	infoMessages  []string
}

func (l *mockLogger) Debug(format string, args ...interface{}) {
	l.debugMessages = append(l.debugMessages, strings.TrimSpace(fmt.Sprintf(format, args...)))
}

func (l *mockLogger) Error(format string, args ...interface{}) {
	l.errorMessages = append(l.errorMessages, strings.TrimSpace(fmt.Sprintf(format, args...)))
}

func (l *mockLogger) Info(format string, args ...interface{}) {
	l.infoMessages = append(l.infoMessages, strings.TrimSpace(fmt.Sprintf(format, args...)))
}

func TestManager_Initialize(t *testing.T) {
	tempDir := t.TempDir()
	logger := &mockLogger{}
	parser := runner.NewJestOutputParser()

	manager, err := NewManager(tempDir, parser, logger, "jest", "npm test")
	if err != nil {
		t.Fatalf("Failed to create manager: %v", err)
	}
	defer func() { _ = manager.Finalize(0) }()

	// Test with empty test files list (dynamic discovery)
	testFiles := []string{}
	args := "npm test"

	if err := manager.Initialize(testFiles, args); err != nil {
		t.Fatalf("Initialize failed: %v", err)
	}

	// Check that test-run.md was created
	reportPath := filepath.Join(tempDir, "test-run.md")
	if _, err := os.Stat(reportPath); os.IsNotExist(err) {
		t.Error("test-run.md was not created")
	}

	// Reports directory is no longer created - using group-based structure

	// Check that output.log was created
	outputLogPath := filepath.Join(tempDir, "output.log")
	if _, err := os.Stat(outputLogPath); os.IsNotExist(err) {
		t.Error("output.log was not created")
	}
}

func TestManager_InitializeWithStaticFiles(t *testing.T) {
	tempDir := t.TempDir()
	logger := &mockLogger{}
	parser := runner.NewJestOutputParser()

	manager, err := NewManager(tempDir, parser, logger, "jest", "npm test")
	if err != nil {
		t.Fatalf("Failed to create manager: %v", err)
	}
	defer func() { _ = manager.Finalize(0) }()

	// Test with static test files
	testFiles := []string{"math.test.js", "string.test.js"}
	args := "npx jest"

	if err := manager.Initialize(testFiles, args); err != nil {
		t.Fatalf("Initialize failed: %v", err)
	}

	// Individual file reports are no longer created at initialization
	// Reports are now generated by the group manager when tests execute
}

// TestManager_HandleTestFileStartEvent - REMOVED
// Legacy testFileStart events are no longer supported, replaced by group events

// TestManager_HandleStdoutChunkEvent - REMOVED
// Legacy stdout/stderr chunk events are no longer supported, replaced by group events

// TestManager_HandleTestCaseEvent - REMOVED
// Legacy testCase events are no longer supported, replaced by group events

// TestManager_HandleTestFileResultEvent - REMOVED
// Legacy testFileResult events are no longer supported, replaced by group events

// TestManager_TestCaseFormatting - REMOVED
// Test uses legacy testCase events which are no longer supported

func TestManager_HandleRunCompleteEvent(t *testing.T) {
	tempDir := t.TempDir()
	logger := &mockLogger{}
	parser := runner.NewJestOutputParser()

	manager, err := NewManager(tempDir, parser, logger, "jest", "npm test")
	if err != nil {
		t.Fatalf("Failed to create manager: %v", err)
	}
	defer func() { _ = manager.Finalize(0) }()

	if err := manager.Initialize([]string{}, "npm test"); err != nil {
		t.Fatalf("Initialize failed: %v", err)
	}

	// Send runComplete event - should not cause error
	event := ipc.RunCompleteEvent{
		EventType: ipc.EventTypeRunComplete,
		Payload:   struct{}{},
	}

	if err := manager.HandleEvent(event); err != nil {
		t.Errorf("HandleEvent should handle runComplete gracefully, got error: %v", err)
	}

	// Should not generate any error logs
	for _, msg := range logger.errorMessages {
		if strings.Contains(msg, "runComplete") {
			t.Errorf("Unexpected error message about runComplete: %s", msg)
		}
	}
}

// TestManager_Debouncing - REMOVED
// Test uses legacy stdoutChunk events which are no longer supported

// TestManager_NoDuplicateTestBoundaries - REMOVED
// Test uses legacy testCase and stdoutChunk events which are no longer supported

// TestManager_TestCaseOutputAssociation - REMOVED
// Test uses legacy testCase, stdoutChunk and stderrChunk events which are no longer supported

// TestManager_TestResultsInLogFiles - REMOVED
// Test uses legacy testCase and testFileResult events which are no longer supported
