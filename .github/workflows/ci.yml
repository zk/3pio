name: CI

on:
  push:
    branches: [ main, go-migration ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.25.1'
  NODE_VERSION: '22'

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install pytest
        run: pip install pytest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Node.js is needed for test fixtures but no root package.json exists
      
      - name: Install test fixture dependencies (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          for dir in tests/fixtures/*/; do
            if [ -f "$dir/package.json" ]; then
              echo "Installing dependencies in $dir"
              (cd "$dir" && npm ci)
            fi
          done
      
      - name: Install test fixture dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem -Path tests/fixtures -Directory | ForEach-Object {
            $packageJson = Join-Path $_.FullName "package.json"
            if (Test-Path $packageJson) {
              Write-Host "Installing dependencies in $_"
              Push-Location $_.FullName
              npm ci
              Pop-Location
            }
          }
        shell: pwsh

      - name: Prepare adapters
        run: make adapters

      - name: Build binary
        run: make build

      - name: Run Go tests
        run: go test -v ./...

      - name: Run integration tests (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          # Test Jest integration (exit code 1 expected due to failing test fixtures)
          cd tests/fixtures/basic-jest
          ../../../build/3pio npx jest math.test.js string.test.js || true
          
          # Verify that 3pio created output
          if [ ! -d ".3pio/runs" ]; then
            echo "ERROR: 3pio did not create expected output directory"
            exit 1
          fi
          
          # Test Vitest integration (exit code 1 expected due to failing test fixtures)
          cd ../basic-vitest
          ../../../build/3pio npx vitest run math.test.js string.test.js || true
          
          # Verify that 3pio created output
          if [ ! -d ".3pio/runs" ]; then
            echo "ERROR: 3pio did not create expected output directory"
            exit 1
          fi

      - name: Run integration tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $ErrorActionPreference = "Continue"
          
          # Test Jest integration (exit code 1 expected due to failing test fixtures)
          cd tests/fixtures/basic-jest
          & ../../../build/3pio.exe npx jest math.test.js string.test.js
          $jestExitCode = $LASTEXITCODE
          
          # Check if output was created
          if (-not (Test-Path ".3pio/runs")) {
            Write-Error "ERROR: 3pio did not create expected output directory for Jest"
            exit 1
          }
          Write-Host "Jest integration test completed (exit code: $jestExitCode)"
          
          # Test Vitest integration (exit code 1 expected due to failing test fixtures)
          cd ../basic-vitest
          & ../../../build/3pio.exe npx vitest run math.test.js string.test.js
          $vitestExitCode = $LASTEXITCODE
          
          # Check if output was created
          if (-not (Test-Path ".3pio/runs")) {
            Write-Error "ERROR: 3pio did not create expected output directory for Vitest"
            exit 1
          }
          Write-Host "Vitest integration test completed (exit code: $vitestExitCode)"
          
          # Success - tests ran and created output
          exit 0
        shell: pwsh

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install pytest
        run: pip install pytest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run Go linting
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

      - name: Run Go formatting check
        run: |
          gofmt_files=$(gofmt -l .)
          if [ -n "$gofmt_files" ]; then
            echo "The following files need formatting:"
            echo "$gofmt_files"
            exit 1
          fi